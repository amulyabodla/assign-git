1. What is a gitignore file and what should it include for a Java project?

Ans: Using GitIgnore we can set the files which we want to ignore. In our main project we can add the file names which we want to ignore
to the gitignore file using any text editor. 
Generally for any project we might have some project specific files generated by the IDE, all these have to be included in the gitignore file.
Ex: .project file, .classpath file, .settings/ directory, all these can be ignored which are local to the system in which the developer is using.
These files are generally user independent files and will change from machine to machine. 

2.What does fast-forward in Git mean?

Ans: There can be situations when we have a linear process of change commits made from the main branch.
For ex: main branch is pointing to V3, and we have two new versions of code commits which are new features developed in V4 and V5 and
our feature branch is pointing to V5. Now when we want to merge the main to V5 it is not easy as there is another linear commit branch V4
in between the two commits. In such situation we can use fast-forward which will help us to make the main branch to point towards V5 instead of 
linearly merging every version.

3.Why should you have different branches?

Ans: Different branches are needed for many purposes :
	1. When multiple developers are working on different independent work items, then the users can create a local branch for each of their tasks
	work on it and later merge their changes.
	2. Branches are also useful when the application has different environments, like dev, test, pre-prod, prod where one can deploy 
	changes to each of the branches independently with each environment having its independent version of code.
	3. Branches are also used to maintain a history of development where we can always roll back to a previous version of code when a new
	change fails to work.


4.In a project how many remote Git repositories do you usually have?

Ans: Generally any project will have one remote repository and multiple branches are created based on the needs of the developers. 
But in some cases when the code base is too large and the number of lines of code exceed the maximum limit supported by Git, or if different
teams are working on different parts of the application which are completely independent then the team might prefer to have multiple remote
repositories set up.